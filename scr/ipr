#!/bin/sh
#
# $Header: ipr                                           Exp $
# $Aythor: (c) 2011-2014 -tclover <tokiclover@gmail.com> Exp $
# $License: MIT (or 2-clause/new/simplified BSD)         Exp $
# $Version: 2.4 2014/09/15 21:09:26                      Exp $
#

usage() {
cat <<-EOF
	usage: ${0##*/} [-ewlan]0 [-ieth0] [-4|-6] [OPTIONS]

	-b, --block 1863,ntp         block service or port 1863,ntp
	-i, --int=eth0               use eth0 internal interface
	-e, --ext=wlan0              use wlan0 external interface
	-d, --dhcp [<server_ip>]     enable dhcp, use dhcp server IP
	-4, --ipv=4                  short hand for --ipv=4
	-6, --ipv=6                  short hand for --ipv=6
	-m, --module [<modules>]     insert kernel coma separated list of kernel modules
	    --mpd  [6600]            allow in/outbound from loop back device src for mpd
	    --msn  [1863]            short hand of '-s 1863'
	    --icq  [5190]            short hand of '-s 5190'
	    --jabber [5222]          short hand of '-s 5222'
	    --yahoo  [5050]          short hand of '-s 5050'
	    --torrent [50550:50555]  enable torrent traffic on those ports   
	-s, --srv pop3,pop3s         allow in/outbound for named services or ports
	-S, --save [ipt-rules]       save ip[6]tables rules to file, default to ipt-rules
	-I, --ipset [<IPBlock>]      enable IPSet set, default to adding IPBlock
	-?, -h, --help               print this help and exit
EOF
exit $?
}

opt=$(getopt -o ?46I::b:i:e:d::m::S::s:h -l block:,ext:,jabber::,icq::,ipset:: \
	-l mpd::,msn::,torrent::,int:,ipv:,dhcp::,module::,mpd,save::,srv: \
	-l usage,yahoo:: -n ${0##*/} -- "$@" || usage)
eval set -- "$opt"

while [[ $# > 0 ]]; do
	case $1 in
		-e|--ext) ext=$2; shift 2;;
		-i|--int) int=$2; shift 2;;
		-4) ipv4=true ipv+=" ipv4"; shift;;
		-6) ipv6=true ipv+=" ipv6"; shift;;
		--mpd) mpd=${2:-6600}; shift 2;;
		-b|--block) bck+=,$2,; shift 2;;
		-I|--ipset) ipb+=,${2:-IPBlock}; shift 2;;
		--msn) srv+=,${2:-1853}; shift 2;;
		--icq) srv+=,${2:-5190}; shift 2;;
		--jabber) srv+=,${2:-5222}; shift 2;;
		--yahoo) srv+=,${2:-5050}; shift 2;;
		-d|--dhcp) dhcp=true dsr=${2}; shift 2;;
		-m|--module) kmod=y module+=" $2"; shift 2;;
		--ipv)
			for i in ${2/,/ }; do 
				ipv$i=true ipv=+" ipv$i"
			done; shift 2;;
		-S|--save) save=${2:-/var/lib/iptables/ipt-rules}; shift 2;;
		--torrent) torrent=${2:-50550:50555}; shift 2;;
		-s|--srv) srv+=,$2; shift 2;;
		--) shift; break;;
		-?|-h|--help|*) usage;;
	esac
done

[ "${LC_ALL%.UTF-8}" = "$LC_ALL" ] || [ "${LC_ALL%.utf-8}" = "$LC_ALL" ] ||
	export LC_ALL="en_US.utf8"

awk="$(which awk)"
grp="$(which grep)"
ifc="$(which ifconfig)"
sed="$(which sed)"

for cmd in "$awk" "$grp" "$ifc" "$sed"; do
	if [ -z "$cmd" ]; then
		echo "basic commands not found"
		exit 1
	fi
done

if [ -z "$ext" ] && [ -z "$int" ]; then
	ext="$($ifc | $sed -nre '/RUNNING/s/(^[we].*):.*/\1/p')"
	ext="${ext%% *}"

	if [ -z "$ext" ]; then
		echo "no running interface found, nothing to do"
		exit 2
	fi
fi

[ -z "$ipv4" ] && [ -z "$ipv6" ] && ipv4=true

bck+=,0:1,13,98,111,137:139,161:162,445,517:518,520,1214,1999,3049,4329
bck+=,6346,3128,8000,12345,65535,98,512:515,6112,1427,9000
srv+=,git,domain,ssh,http,http-alt,https,ftp,ftp-data,ftps,ipp,imap2,imap3,imaps,mail
srv+=,time,rsync,ircd,ircs,hkp,telnets,ftp,ftp-data,ntp

for i in $bck; do
	[ "${srv/$i}" = "$srv" ] && srv+=",$i" || srv="${srv/,$i/}"
done

for mod in ip_nat_{ftp,irc} ip_conntrack_{ftp,irc} iptable_{filter,mangle,raw} \
	nf_conntrack_ipv4 iptable_nat ipt_{MASQUERADE,REDIRECT,REJECT,LOG} $module
do
	$grp -q "$mod" /proc/modules || modprobe "$mod"
done

if [ -n "$ipv6" ]; then
	for mod in ip6table_{filter,mangle,raw} nf_conntrack_ipv6 ip6t_{LOG,REJECT} 
	do
		$grp -q "$mod" /proc/modules || modprobe "$mod"
	done
fi

if [ -n "$ipv4" ]; then
	echo 1 >/proc/sys/net/ipv4/tcp_syncookies
	echo 1 >/proc/sys/net/ipv4/icmp_echo_ignore_broadcasts
	echo 1 >/proc/sys/net/ipv4/ip_dynaddr
	# Source Address Verification
	for filter in /proc/sys/net/ipv4/conf/*/rp_filter; do 
		echo 1 >$filter
	done
	echo 1 >/proc/sys/net/ipv4/ip_forward
fi

for v in $ipv; do
	# Disable IP source routing and ICMP redirects
	for filter in /proc/sys/net/$v/conf/*/accept_source_route; do 
		echo 0 >$filter
	done
	for filter in /proc/sys/net/$v/conf/*/accept_redirects; do 
		echo 0 >$filter
	done
done

doipr() {
	local b dv p s
	# Deny then accept: this keeps holes from opening up while we close ports and such
	$ipt -P INPUT      DROP
	$ipt -P OUTPUT     DROP
	$ipt -P FORWARD    DROP
	# Create a few custom chains that will log dropped/rejected packets
	$ipt -N drop
	$ipt -A drop   -j LOG --log-prefix 'IPT-drop: '
	$ipt -A drop   -j DROP
	$ipt -N reject
	$ipt -A reject -j LOG --log-prefix 'IPT-reject: '
	$ipt -A reject -j REJECT
	# Log and drop bad tcp packets stated NEW without a SYN packet after being called by badtcp filter
	$ipt -N badtcp
	$ipt -A badtcp -j LOG --log-prefix 'IPT-badtcp: '
	$ipt -A badtcp -j DROP
	# Drop or rejetc bad tcp packets stated NEW but without a SYN packet
	$ipt -A badtcp  -p tcp -m conntrack --ctstate INVALID -j badtcp
	$ipt -A badtcp  -p tcp --tcp-flags SYN,ACK SYN,ACK -m conntrack --ctstate NEW -j REJECT --reject-with tcp-reset
	$ipt -A badtcp  -p tcp ! --syn -m conntrack --ctstate NEW -j badtcp
	# Filter bad tcp right at the bat
	# Add IPSet sets while at it if enabled
	for b in $(echo "$ipb" | sed -e 's/,/ /g'); do
		$ipt -I INPUT -m set --match-set $b src,dst -j drop
	done

	# Accept all traffic from loopback device if the IP matches any of our interfaces.
	$ipt -A INPUT -s   $lbdip${ipv4:+/$lbdmsk}   -j ACCEPT
	$ipt -A OUTPUT -s   $lbdip${ipv4:+/$lbdmsk}   -j ACCEPT
	echo -n "ipr: Blocking trafic to TCP/UDP port "
	for p in $(echo "$bck" | sed 's/,/ /g'); do
		echo -n "$p "
		for type in tcp udp; do
			$ipt -A INPUT   -p $type --dport $p  -j drop
			$ipt -A OUTPUT  -p $type --dport $p  -j drop
			$ipt -A FORWARD -p $type --dport $p  -j drop
		done
	done
	echo ""
	
	if [ -n "$dhcp" ]; then 
		if [ -n "$ipv4" ]; then
			dv="--sport 67:68 --dport 67:68"
		elif [ -n "$ipv6" ]; then
			dv="--sport dhcpv6-server --dport dhcpv6-server"
		fi
		$ipt -A INPUT  -p udp -i $ext $dv ${dsr:+-s $dsr} -j ACCEPT
		$ipt -A OUTPUT -p udp -o $ext $dv ${dsr:+-s $dsr} -j ACCEPT
	fi
	
	echo -n "ipr: Allowing inside systems to use service: "
	for s in $(echo "$srv" | sed 's/,/ /g'); do
		echo -n "$s "
		$ipt -A OUTPUT  -o $ext  -p tcp --dport $s --syn -m conntrack --ctstate NEW -j ACCEPT
		$ipt -A OUTPUT  -o $ext  -p udp --dport $s       -m conntrack --ctstate NEW -j ACCEPT
	done
	echo ""
	
	if [ -n "$mpd" ]; then
		echo "Opening TCP Output over $lbdip:$mpd for MPD"
		$ipt -A INPUT  -p tcp --dport $mpd -s $lbdip --syn -m conntrack --ctstate NEW -j ACCEPT
		$ipt -A OUTPUT -p tcp --dport $mpd -s $lbdip --syn -m conntrack --ctstate NEW -j ACCEPT

	fi
	
	if [[ -n "$torrent" ]]; then
		# turning off DHT tracking for torrent
		echo "ipr: disabling tracking on ${torrent#*:}-udp-port PREROUTING and OUTPUT"
		$ipt -t raw -A PREROUTING -i $ext -p udp --dport ${torrent#*:} -j NOTRACK
		$ipt -t raw -A OUTPUT     -o $ext -p udp --sport ${torrent#*:} -j NOTRACK
		# Torrents ports
		echo "Opening $torrent port for torrent"
		$ipt -A INPUT -p tcp --dport $torrent -i $ext --syn -m conntrack --ctstate NEW -j ACCEPT
		$ipt -A INPUT -p udp --dport $torrent -i $ext       -m conntrack --ctstate NEW -j ACCEPT
	fi

	$ipt -A INPUT   -p tcp --dport auth --syn -m conntrack --ctstate NEW -j ACCEPT
	$ipt -A OUTPUT  -p tcp --dport auth --syn -m conntrack --ctstate NEW -j ACCEPT
	$ipt -A INPUT   -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	$ipt -A OUTPUT  -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
	$ipt -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

	# Accept all traffic from loopback device if the IP matches any of our interfaces
	$ipt -A INPUT -s $lbdip/$lbdmsk -d $ip -j ACCEPT
	$ipt -A OUTPUT -s $lbdip/$lbdmsk -d $ip -j ACCEPT
	# Block WAN access to internal network
	$ipt -A INPUT   -i $ext ! -d $ip -j drop
	# Block outbound ICMP (except for PING)
	$ipt -A OUTPUT  -o $ext -p $icmp ! --$icmp-type 8 -j drop
	$ipt -A FORWARD -o $ext -p $icmp ! --$icmp-type 8 -j drop
	# Allow to ping out
	$ipt -A OUTPUT  -o $ext  -p $icmp  --$icmp-type 8 -m conntrack --ctstate NEW -j ACCEPT

	if [[ -n "$int" ]]; then
		$ipt -A INPUT    -i $int -s $msk -j ACCEPT
		$ipt -A FORWARD  -o $int -s $msk -j ACCEPT
		$ipt -A OUTPUT   -o $int -s $msk -j ACCEPT
	fi

	if [ -n "$ipv4" ]; then
		# NAT I/O
		$ipt -A PREROUTING  -t nat -j ACCEPT
		$ipt -A POSTROUTING -t nat -j ACCEPT
		$ipt -A OUTPUT      -t nat -j ACCEPT

		# Blocking Broadcasts
		$ipt -A INPUT   -i $ext -d   $msk -j drop
		$ipt -A OUTPUT  -o $ext -d   $msk -j drop
		$ipt -A FORWARD -o $ext -d   $msk -j drop
		# An additional Egress check
		$ipt -A OUTPUT  ! -o $ext -s $msk -j drop
	fi
	# Block and log what me may have forgot
	$ipt -A INPUT   -j drop
	$ipt -A OUTPUT  -j reject
	$ipt -A FORWARD -j drop
}

doif() {
	local bc icmp if=$1 lbdif=lo lbdmsk lbdnet msk net ip icmp ipt
	if [ -n "$ipv4" ]; then
		icmp=icmp ipt="$(which iptables) --modprobe=$(which modprobe)"
		ip="$( $ifc $ext | $awk '/inet / {print $2}')"
		bc="$( $ifc $ext | $awk '/inet / {print $6}')"
		msk="$($ifc $ext | $awk '/inet / {print $4}')"
		lbdip="$( $ifc  $lbdif | $awk '/inet / {print $2}')"
		lbdmsk="$($ifc  $lbdif | $awk '/inet / {print $4}')"
		lbdnet="loop back iface: $lbdip/$lbdmsk"
		net="$ip/$msk"
		echo "ipr: ip=$ip bc=$bc msk=$msk net=$net"
		$ipt -F; $ipt -X
		doipr
		[ -n "$save" ] && $ipt-save >$save
	fi
	if [ -n "$ipv6" ]; then
		icmp=icmpv6 ipt="$(which ip6tables) --modprobe=$(which modprobe)"
		ip="$($ifc  $if | $awk '/inet6 / {print $2}')"
		lbdip="$($ifc  $lbdif $awk '/inet6 / {print $2}')"
		echo "ipr: ip=$ip lbdip=$lbdip"
		unset -v ipv4 {,lbd}{bc,msk,net}
		$ipt -F; $ipt -X
		doipr
		[ -n "$fsave" ] && $ipt-save >${save/ipt/ip6t}
	fi
}

if [ -n "$ext" ]; then
	doif "$ext"
elif [ -n "$int" ]; then
	ext=$int int= && doif "$ext"
else 
	usage
fi

unset -v awk bck dhcp dsr ext i ipv ipv4 ipv6 ifc int ipt grp kmod module srv

# vim:fenc=utf-8:ci:pi:sts=0:sw=4:ts=4:
